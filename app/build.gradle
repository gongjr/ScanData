apply plugin: 'com.android.application'

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        applicationId "com.gjr.scandata"
        minSdkVersion 16
        targetSdkVersion 19
        versionCode 1
        versionName "1.1"
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
        //批量打包--指定配置文件
        //不同的渠道商对应的各自AndroidManifest
        //AndroidManifest的application标签只用配置渠道号的值
        //其他公共配置都放在公共的AndroidManifest.xml中
//        one {
//            manifest.srcFile 'tests/AndroidManifest.xml'
//        }
//        two {
//            manifest.srcFile 'tests/AndroidManifest.xml'
//        }
//        instrumentTest.setRoot('tests')

    }

    //批量打包--声明
//    productFlavors {
//        one {
//            //这里可以配置不同的包名
//        }
//        two {
//        //这里可以配置不同的包名
//        }
//}
    /**
     *将.so文件打包重Native_Libs2
     */
//    task nativeLibsToJar(type: Zip, description: "create a jar archive of the native libs") {
//        destinationDir file("$projectDir/libs")
//        baseName "Native_Libs2"
//        extension "jar"
//        from fileTree(dir: "libs", include: "***/*//*.so")
//        into "lib"
//    }
//
//    tasks.withType(JavaCompile) {
//        compileTask -> compileTask.dependsOn(nativeLibsToJar)
//    }

    //执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。
    lintOptions {
        abortOnError false
    }

    /**
     * 声明打包签名文件
     * 注签名密码放在这边是不安全的
     */
    signingConfigs {
        release {
            keyAlias 'scandate'
            keyPassword 'scandate'
            storeFile file('/scandate,jks')
            storePassword 'scandate'
        }
    }

    buildTypes {
        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //混淆否
            minifyEnabled true

            //Zipalign优化
            zipAlignEnabled true

            // 移除无用的resource文件
            shrinkResources true

            //签名引用
            signingConfig signingConfigs.release

            //加载默认混淆配置文件 progudard-android.txt在sdk目录里面，不用管，eclipse中是把
            // proguard-rules.pro是我自己配的混淆文件
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }

        debug{
            buildConfigField "boolean", "LOG_DEBUG", "true"// 显示Log，调试
            minifyEnabled true//混淆代码，调试
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"

        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':kxlivelibrary')
}
